# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_api.ipynb.

# %% auto 0
__all__ = ['export_notebook']

# %% ../nbs/03_api.ipynb 5
import io
from typing import Dict, Iterable, Reversible, Sequence, Tuple

# %% ../nbs/03_api.ipynb 6
from .transformations import Transformer
from beetroot.source import (
    SourceHandler,
)
from beetroot.outputs import (
    Completion,
    emit_display_data_output,
    emit_execute_result_output,
    emit_stream_output,
)

# %% ../nbs/03_api.ipynb 7
def export_notebook(
    nb_json: Dict, transformers_map: Dict[str, Reversible[Transformer]] = {}
) -> Tuple[str, Iterable[Completion]]:
    stream = io.StringIO()
    source_handler = SourceHandler(stream, transformers_map)

    completions = []
    for cell in nb_json["cells"]:
        if cell["cell_type"] == "markdown":
            source_handler.emit_markdown(cell["source"])
            stream.write("\n")
        elif cell["cell_type"] == "code":
            should_show_output = source_handler.emit_python_source(cell["source"])
            stream.write("\n")

            if not should_show_output:
                continue

            for output in cell["outputs"]:
                output_type = output["output_type"]
                if output_type == "stream":
                    emit_stream_output(output, stream)
                elif output_type == "display_data":
                    completion = emit_display_data_output(output, stream)
                    if completion:
                        completions.append(completion)
                elif output_type == "execute_result":
                    completion = emit_execute_result_output(output, stream)
                    if completion:
                        completions.append(completion)
                stream.write("\n")

    stream.seek(0)
    return stream.read(), completions
