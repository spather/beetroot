# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/markdown/03_markdown_api.ipynb.

# %% auto 0
__all__ = ['export_markdown_notebook']

# %% ../../nbs/markdown/03_markdown_api.ipynb 5
import io
from typing import Dict, Iterable, Sequence, Tuple

# %% ../../nbs/markdown/03_markdown_api.ipynb 6
from ..api import handle_notebook

from beetroot.markdown.transformations import (
    Transformer,
    TransformerWithDirectives,
)
from beetroot.markdown.source import (
    MarkdownSourceHandler,
)
from .outputs import MarkdownOutputHandler, MarkdownCompletion

# %% ../../nbs/markdown/03_markdown_api.ipynb 8
def export_markdown_notebook(
    nb_json: Dict,
    markdown_source_transformer: Transformer = Transformer(),
    python_source_transformer: TransformerWithDirectives = TransformerWithDirectives(),
    output_transformers_map: Dict[str, Transformer] = {},
) -> Tuple[str, Iterable[MarkdownCompletion]]:
    """Export a notebook as markdown.


    Parameters
    ----------
    nb_json
        A Dict containing the notebook contents as parsed from JSON

    markdown_source_transformer
        Transformer to apply cells whose source type is markdown

    python_source_transformer
        Transformer to apply cells whose source type is python code

    output_transformers_map
        A Dict mapping output cell types to transformers

    Returns
    --------
        Tuple[str, Iterable[MarkdownCompletion]]
            A tuple whose first element is the markdown content as
            a string and whose second element is an iterable of
            completions to run to serialize all external data such
            as images.
    """
    stream = io.StringIO()
    source_handler = MarkdownSourceHandler(
        stream=stream,
        markdown_source_transformer=markdown_source_transformer,
        python_source_transformer=python_source_transformer,
    )
    output_handler = MarkdownOutputHandler(stream, output_transformers_map)

    completions = handle_notebook(nb_json, source_handler, output_handler)

    stream.seek(0)
    return stream.read(), completions
