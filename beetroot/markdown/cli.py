# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/markdown/04_markdown_cli.ipynb.

# %% auto 0
__all__ = ['MarkdownBackendConfig']

# %% ../../nbs/markdown/04_markdown_cli.ipynb 4
import argparse
import json
from pathlib import Path
from typing import Dict, Protocol

# %% ../../nbs/markdown/04_markdown_cli.ipynb 5
from ..backend_config import BackendConfig
from .api import export_markdown_notebook
from beetroot.markdown.transformations import (
    EscapeUnderscoresWithLatexMath,
    MultiTransformer,
    ReplaceSingleDollarDelimiters,
    Unindent,
)

# %% ../../nbs/markdown/04_markdown_cli.ipynb 6
class MarkdownBackendConfig(BackendConfig):
    def configure_arg_parser(self, parser: argparse.ArgumentParser):
        parser.add_argument(
            "output_dir",
            type=str,
            help="Output directory for the markdown and associated files",
        )
        pass

    def run(self, nb_json: Dict, args: argparse.Namespace):
        nb_path = Path(args.nb_filename)

        output_path = Path(args.output_dir)

        # TODO: add transformers dynamically based on cli args
        transformer = MultiTransformer(
            [EscapeUnderscoresWithLatexMath(), ReplaceSingleDollarDelimiters()]
        )
        markdown, completions = export_markdown_notebook(
            nb_json,
            transformers_map={
                "markdown/source": transformer,
                "text/markdown/data/output": transformer,
                "text/latex/data/output": transformer,
                "text/html/data/output": Unindent(),
            },
        )
        # Run the completion
        for completion in completions:
            completion(output_path)

        # Write the markdown to an output file
        md_filename = output_path / nb_path.with_suffix(".md").name
        with open(md_filename, "w") as md_file:
            md_file.write(markdown)
