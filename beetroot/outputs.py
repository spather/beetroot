# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_outputs.ipynb.

# %% auto 0
__all__ = ['emit_stream_output', 'emit_execute_result_output', 'emit_display_data_output']

# %% ../nbs/01_outputs.ipynb 4
import io
from textwrap import dedent
from typing import Dict, Iterable

# %% ../nbs/01_outputs.ipynb 5
def emit_lines(lines: Iterable[str], stream: io.TextIOBase):
    for line in lines:
        stream.write(line)
    if line[-1] != "\n":
        stream.write("\n")


def emit_plaintext(lines: Iterable[str], stream: io.TextIOBase):
    stream.write("```\n")
    emit_lines(lines, stream)
    stream.write("```\n")


def emit_output_data(data: Dict, stream: io.TextIOBase):
    lines_mimetypes = ["text/markdown", "text/latex", "text/html"]

    for mimetype in lines_mimetypes:
        if mimetype in data:
            emit_lines(data[mimetype], stream)
            return

    if "text/plain" in data:
        emit_plaintext(data["text/plain"], stream)

# %% ../nbs/01_outputs.ipynb 6
def emit_stream_output(output: Dict, stream: io.TextIOBase):
    """Emits markdown from [stream output](https://nbformat.readthedocs.io/en/latest/format_description.html#stream-output)."""
    assert output["output_type"] == "stream"

    text = output["text"]
    emit_plaintext(text, stream)

# %% ../nbs/01_outputs.ipynb 8
def emit_execute_result_output(output: Dict, stream: io.TextIOBase):
    """Emits markdown from [`execute_result`](https://nbformat.readthedocs.io/en/latest/format_description.html#execute-result) outputs"""

    assert output["output_type"] == "execute_result"
    data = output["data"]
    emit_output_data(data, stream)

# %% ../nbs/01_outputs.ipynb 10
def emit_display_data_output(output: Dict, stream: io.TextIOBase):
    """Emits markdown from [`display_data`](https://nbformat.readthedocs.io/en/latest/format_description.html#display-data) outputs"""

    assert output["output_type"] == "display_data"
    data = output["data"]
    emit_output_data(data, stream)
